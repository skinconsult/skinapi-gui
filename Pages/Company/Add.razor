@attribute [Authorize]
@page "/company/add" 
@inject ISkinApiClient SkinApiClient;
@inject ISnackbar Snackbar;
@inject NavigationManager NavManager;
@inject IDialogService DialogService;

<PageTitle>Add Company - SkinConsult</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Add new Company</MudText>

<MudCard>
    <MudForm Model="@_inputModel" @ref="@_form">
        <MudCardContent>
            <MudTextField @bind-value="_inputModel.Company"
                          T="string"
                          Immediate="true"
                          label="Name"
                          Required="true"
                          RequiredError="Company name is required."/>
            <MudTextField @bind-value="_inputModel.CompanyStreetname1"
                          T="string"
                          Immediate="true"
                          label="Street name 1"
                          Required="true"
                          RequiredError="At least one company streetname is required."/>
            <MudTextField @bind-value="_inputModel.CompanyStreetname2"
                          T="string"
                          Immediate="true"
                          label="Street name 2"/>
            <MudTextField @bind-value="_inputModel.CompanyPostalcode"
                          T="string"
                          Immediate="true"
                          label="Postalcode"
                          Required="true"
                          RequiredError="Company Postalcode is required."/>
            <MudTextField @bind-value="_inputModel.CompanyCity"
                          T="string"
                          Immediate="true"
                          label="City"
                          Required="true"
                          RequiredError="Company city is required."/>
            <MudTextField @bind-value="_inputModel.CompanyCountry"
                          T="string"
                          Immediate="true"
                          label="Country"
                          Required="true"
                          RequiredError="Company country is required."/>
            <MudTextField @bind-value="_inputModel.GeneralEmailaddress"
                          T="string"
                          Immediate="true"
                          label="General Email"/>
            <MudTextField @bind-value="_inputModel.GeneralPhonenumber"
                          T="string"
                          Immediate="true"
                          label="General Phone number"/>
            <MudTextField @bind-value="_inputModel.CompanyWebsite"
                          T="string"
                          Immediate="true"
                          label="Website"/>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="Submit">Submit</MudButton>
        </MudCardActions>
    </MudForm>
</MudCard>


@code {
    CompanyRecord _inputModel = new CompanyRecord();
    MudForm? _form;

    private IEnumerable<CompanyRecord> _companies = new List<CompanyRecord>();

    protected override async Task OnInitializedAsync()
    {
        _companies = await SkinApiClient.GetCompaniesAsync();
    }

    // Replace validation with something that does it on the fly:
    // https://mudblazor.com/components/form#using-simple-fluent-validation
    private async void Submit()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

        if (_companies.Any(c => c.Company.Equals(_inputModel.Company, StringComparison.OrdinalIgnoreCase)))
        {
            return;
        }

        if (_companies.Any(c =>
            c.CompanyStreetname1.Equals(_inputModel.CompanyStreetname1, StringComparison.OrdinalIgnoreCase) ||
            c.CompanyStreetname1.Equals(_inputModel.CompanyStreetname2, StringComparison.OrdinalIgnoreCase)
            ))
        {
            var result = await DialogService.ShowMessageBox(
                "Warning",
                $"Streetname {_inputModel.CompanyStreetname1} already exists in the database. Continue?",
                yesText: "Yes",
                cancelText: "No");

            if (result != true)
            {
                return;
            }
        }

        if (_companies.Any(c =>
            c.CompanyStreetname2.Equals(_inputModel.CompanyStreetname1, StringComparison.OrdinalIgnoreCase) ||
            c.CompanyStreetname2.Equals(_inputModel.CompanyStreetname2, StringComparison.OrdinalIgnoreCase)
            ))
        {
            var result = await DialogService.ShowMessageBox(
                "Warning",
                $"Streetname {_inputModel.CompanyStreetname2} already exists in the database. Continue?",
                yesText: "Yes",
                cancelText: "No");

            if (result != true)
            {
                return;
            }
        }

        if (_companies.Any(c =>
            c.CompanyPostalcode.Equals(_inputModel.CompanyPostalcode, StringComparison.OrdinalIgnoreCase)
            ))
        {
            var result = await DialogService.ShowMessageBox(
                "Warning",
                $"Postal code {_inputModel.CompanyPostalcode} already exists in the database. Continue?",
                yesText: "Yes",
                cancelText: "No");

            if (result != true)
            {
                return;
            }
        }

        SkinApiClient.AddCompanyAsync(_inputModel);
        NavManager.NavigateTo("/company");
    }

}