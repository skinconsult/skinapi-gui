@attribute [Authorize]
@page "/company/add" 
@using System.ComponentModel.DataAnnotations
@using System.Net
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Mvc
@using Microsoft.EntityFrameworkCore
@using MudBlazor
@using Microsoft.Extensions.Configuration;
@using SkinApi.Gui.Clients;
@inject ISkinApiClient SkinApiClient;
@inject ISnackbar Snackbar;
@inject NavigationManager NavManager;

<PageTitle>Add Company - SkinConsult</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Add new Company</MudText>

<MudCard>
    <MudForm Model="@_inputModel" @ref="@form">
    <MudCardContent>
        <MudTextField @bind-value="_inputModel.Company"
                      T="string"
                      Immediate="true"
                      label="Name" 
                      Required="true" 
                      RequiredError="Company name is required."/>
        <MudTextField @bind-value="_inputModel.CompanyStreetname1"
                      T="string"
                      Immediate="true"
                      label="Street name 1" 
                      Required="true" 
                      RequiredError="At least one company streetname is required."/>
        <MudTextField @bind-value="_inputModel.CompanyStreetname2"
                      T="string"
                      Immediate="true"
                      label="Street name 2" />
        <MudTextField @bind-value="_inputModel.CompanyPostalcode"
                      T="string"
                      Immediate="true"
                      label="Postalcode" Required="true"
                      RequiredError="Company Postalcode is required."/>
        <MudTextField @bind-value="_inputModel.CompanyCity"
                      T="string"
                      Immediate="true"
                      label="City" Required="true"
                      RequiredError="Company city is required."/>
        <MudTextField @bind-value="_inputModel.CompanyZIP"
                      T="string"
                      Immediate="true"
                      label="ZIP" />
        <MudTextField @bind-value="_inputModel.CompanyCountry"
                      T="string"
                      Immediate="true"
                      label="Country" Required="true"
                      RequiredError="Company country is required."/>
        <MudTextField @bind-value="_inputModel.SecondAdres"
                      T="string"
                      Immediate="true"
                      label="Second Address" />
        <MudTextField @bind-value="_inputModel.GeneralEmailaddress"
                      T="string"
                      Immediate="true"
                      label="General Email" />
        <MudTextField @bind-value="_inputModel.GeneralPhonenumber"
                      T="string"
                      Immediate="true"
                      label="General Phone number" />
        <MudTextField @bind-value="_inputModel.CompanyWebsite"
                      T="string"
                      Immediate="true"
                      label="Website" />
    </MudCardContent>
    <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="Submit">Submit</MudButton>
            </MudCardActions>
    </MudForm>
</MudCard>


@code {
    [Inject] private IDialogService DialogService { get; set; }
    CompanyRecord _inputModel = new CompanyRecord();
    MudForm form;

    private IEnumerable<CompanyRecord> companies = new List<CompanyRecord>();

    protected override async Task OnInitializedAsync()
    {
        companies = await SkinApiClient.GetCompaniesAsync();
    }
    
    private List<string> CompanyNames = new List<string>();
    private List<string> CompanyStreetNames = new List<string>();
    private List<string> CompanyPostalCodes = new List<string>();
    private List<string> CompanyKVKnumbers = new List<string>();

    private async void Submit()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        
        foreach (var company in companies)
        {
            CompanyNames.Add(company.Company);
            CompanyStreetNames.Add(company.CompanyStreetname1);
            CompanyStreetNames.Add(company.CompanyStreetname2);
            CompanyPostalCodes.Add(company.CompanyPostalcode);
            CompanyKVKnumbers.Add(company.KvKnumber);
        }

        if (CompanyNames.Contains(_inputModel.Company))
        {
            Snackbar.Add("Company name already exists in database. Company has not been added.", Severity.Error);
            return;
        }

        if (CompanyStreetNames.Contains(_inputModel.CompanyStreetname1))
        {
            bool? result = await DialogService.ShowMessageBox(
                "Warning", 
                "Streetname " + _inputModel.CompanyStreetname1 + " already exists in the database. Continue?", 
                yesText:"Yes", cancelText:"No");

            if (result == false)
            {
                return;
            }
        }

        if (CompanyStreetNames.Contains(_inputModel.CompanyStreetname2))
        {
            bool? result = await DialogService.ShowMessageBox(
                "Warning", 
                "Streetname " + _inputModel.CompanyStreetname2 + " already exists in the database. Continue?", 
                yesText:"Yes", cancelText:"No");
            
            if (result == false)
            {
                return;
            }
        }
        
        if (CompanyStreetNames.Contains(_inputModel.CompanyPostalcode))
        {
            bool? result = await DialogService.ShowMessageBox(
                "Warning", 
                "Postal code " + _inputModel.CompanyPostalcode + " already exists in the database. Continue?", 
                yesText:"Yes", cancelText:"No");
            
            if (result == false)
            {
                return;
            }
        }
        
        if (CompanyStreetNames.Contains(_inputModel.KvKnumber))
        {
            bool? result = await DialogService.ShowMessageBox(
                "Warning", 
                "KVK-number " + _inputModel.KvKnumber + " already exists in the database. Continue?", 
                yesText:"Yes", cancelText:"No");
            
            if (result == false)
            {
                return;
            }
        }
        
        SkinApiClient.AddCompanyAsync(_inputModel);
        NavManager.NavigateTo("/company");
    }
}