@page "/company/edit/{CompanyId}"
@using System.ComponentModel.DataAnnotations
@using System.Net
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Mvc
@using Microsoft.EntityFrameworkCore
@using MudBlazor
@using Microsoft.Extensions.Configuration;
@using SkinApi.Gui.Clients;
@inject ISkinApiClient SkinApiClient;
@inject ISnackbar Snackbar;
@inject NavigationManager NavManager;

<PageTitle>Edit Company - SkinConsult</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Edit Company</MudText>

<MudCard>
    <MudForm Model="@_companyRecordModel" @ref="@form">
    <MudCardContent>
        <MudTextField @bind-value="_companyRecordModel.Company"
                      text="@_companyRecordModel.Company"
                      T="string"
                      Immediate="true"
                      label="Name" 
                      Required="true" 
                      RequiredError="Company name is required."/>
        <MudTextField @bind-value="_companyRecordModel.CompanyStreetname1"
                      Text="@_companyRecordModel.CompanyStreetname1"
                      T="string"
                      Immediate="true"
                      label="Street name 1" 
                      Required="true" 
                      RequiredError="At least one company streetname is required."/>
        <MudTextField @bind-value="_companyRecordModel.CompanyStreetname2"
                      Text="@_companyRecordModel.CompanyStreetname2"
                      T="string"
                      Immediate="true"
                      label="Street name 2" />
        <MudTextField @bind-value="_companyRecordModel.CompanyPostalcode"
                      Text="@_companyRecordModel.CompanyPostalcode"
                      T="string"
                      Immediate="true"
                      label="Postalcode" Required="true"
                      RequiredError="Company Postalcode is required."/>
        <MudTextField @bind-value="_companyRecordModel.CompanyCity"
                      Text="@_companyRecordModel.CompanyCity"
                      T="string"
                      Immediate="true"
                      label="City" Required="true"
                      RequiredError="Company city is required."/>
        <MudTextField @bind-value="_companyRecordModel.CompanyCountry"
                      Text="@_companyRecordModel.CompanyCountry"
                      T="string"
                      Immediate="true"
                      label="Country" Required="true"
                      RequiredError="Company country is required."/>
    <MudTextField @bind-value="_companyRecordModel.GeneralEmailaddress"
                      Text="@_companyRecordModel.GeneralEmailaddress"
                      T="string"
                      Immediate="true"
                      label="General Email" />
        <MudTextField @bind-value="_companyRecordModel.GeneralPhonenumber"
                      Text="@_companyRecordModel.GeneralPhonenumber"
                      T="string"
                      Immediate="true"
                      label="General Phone number" />
        <MudTextField @bind-value="_companyRecordModel.CompanyWebsite"
                      Text="@_companyRecordModel.CompanyWebsite"
                      T="string"
                      Immediate="true"
                      label="Website" />
    </MudCardContent>
    <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="Submit">Submit</MudButton>
            </MudCardActions>
    </MudForm>
</MudCard>


@code {
    [Inject] private IDialogService DialogService { get; set; }
    [Parameter] public string CompanyId { get; set; }
    
    CompanyRecord _companyRecordModel = new CompanyRecord();
    MudForm form;
    
    private IEnumerable<CompanyRecord> _companies = new List<CompanyRecord>();

    protected override async Task OnInitializedAsync()
    {
        _companies = await SkinApiClient.GetCompaniesAsync();
        _companyRecordModel = _companies.FirstOrDefault(x => x.CompanyId.Value.ToString() == CompanyId);
        StateHasChanged();
        
    }

    private List<string> CompanyNames = new List<string>();

    private void Submit()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        
        foreach (var company in _companies)
        {
            CompanyNames.Add(company.Company);
        }
        if (CompanyNames.Contains(_companyRecordModel.Company))
        {
            Snackbar.Add("Company name already exists in database. Company has not been updated.", Severity.Error);
            return;
        }

        // Check error on submit? (Say, if server validation failed).
        SkinApiClient.UpdateCompanyAsync(_companyRecordModel);
        NavManager.NavigateTo("/company");
    }
}